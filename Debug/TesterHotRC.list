
TesterHotRC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003b14  08003b14  00004b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b40  08003b40  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003b40  08003b40  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003b40  08003b40  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b44  08003b44  00004b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08003b54  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003b54  00005118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba2a  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b24  00000000  00000000  00010a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00012588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093e  00000000  00000000  00013150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d36  00000000  00000000  00013a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cab7  00000000  00000000  0002a7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086a45  00000000  00000000  0003727b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bdcc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000328c  00000000  00000000  000bdd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000c0f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003afc 	.word	0x08003afc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003afc 	.word	0x08003afc

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_f2uiz>:
 8000988:	0042      	lsls	r2, r0, #1
 800098a:	d20e      	bcs.n	80009aa <__aeabi_f2uiz+0x22>
 800098c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000990:	d30b      	bcc.n	80009aa <__aeabi_f2uiz+0x22>
 8000992:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000996:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800099a:	d409      	bmi.n	80009b0 <__aeabi_f2uiz+0x28>
 800099c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009a4:	fa23 f002 	lsr.w	r0, r3, r2
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr
 80009b0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80009b4:	d101      	bne.n	80009ba <__aeabi_f2uiz+0x32>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d102      	bne.n	80009c0 <__aeabi_f2uiz+0x38>
 80009ba:	f04f 30ff 	mov.w	r0, #4294967295
 80009be:	4770      	bx	lr
 80009c0:	f04f 0000 	mov.w	r0, #0
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009cc:	f000 fc14 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d0:	f000 f81c 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d4:	f000 f9da 	bl	8000d8c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009d8:	f000 f9ae 	bl	8000d38 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80009dc:	f000 f910 	bl	8000c00 <MX_TIM2_Init>
  MX_CRC_Init();
 80009e0:	f000 f85a 	bl	8000a98 <MX_CRC_Init>
  MX_TIM1_Init();
 80009e4:	f000 f86c 	bl	8000ac0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009e8:	2100      	movs	r1, #0
 80009ea:	4806      	ldr	r0, [pc, #24]	@ (8000a04 <main+0x3c>)
 80009ec:	f001 fbe4 	bl	80021b8 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Signal Input Channel first (Main)
 80009f0:	2100      	movs	r1, #0
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <main+0x40>)
 80009f4:	f001 fd9a 	bl	800252c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);    // Secondary Channel
 80009f8:	2104      	movs	r1, #4
 80009fa:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <main+0x40>)
 80009fc:	f001 fcd6 	bl	80023ac <HAL_TIM_IC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <main+0x38>
 8000a04:	20000030 	.word	0x20000030
 8000a08:	20000078 	.word	0x20000078

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b090      	sub	sp, #64	@ 0x40
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0318 	add.w	r3, r7, #24
 8000a16:	2228      	movs	r2, #40	@ 0x28
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 f842 	bl	8003aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a40:	2302      	movs	r3, #2
 8000a42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a4a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0318 	add.w	r3, r7, #24
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fef7 	bl	8001848 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a60:	f000 fa3a 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 f964 	bl	8001d4c <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a8a:	f000 fa25 	bl	8000ed8 <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3740      	adds	r7, #64	@ 0x40
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <MX_CRC_Init+0x20>)
 8000a9e:	4a07      	ldr	r2, [pc, #28]	@ (8000abc <MX_CRC_Init+0x24>)
 8000aa0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_CRC_Init+0x20>)
 8000aa4:	f000 fd17 	bl	80014d6 <HAL_CRC_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000aae:	f000 fa13 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000028 	.word	0x20000028
 8000abc:	40023000 	.word	0x40023000

08000ac0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b096      	sub	sp, #88	@ 0x58
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
 8000aee:	615a      	str	r2, [r3, #20]
 8000af0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2220      	movs	r2, #32
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 ffd3 	bl	8003aa4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000afe:	4b3e      	ldr	r3, [pc, #248]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000b00:	4a3e      	ldr	r2, [pc, #248]	@ (8000bfc <MX_TIM1_Init+0x13c>)
 8000b02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b04:	4b3c      	ldr	r3, [pc, #240]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b10:	4b39      	ldr	r3, [pc, #228]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000b12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b18:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b1e:	4b36      	ldr	r3, [pc, #216]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b24:	4b34      	ldr	r3, [pc, #208]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b2a:	4833      	ldr	r0, [pc, #204]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000b2c:	f001 fa9c 	bl	8002068 <HAL_TIM_Base_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b36:	f000 f9cf 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b40:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b44:	4619      	mov	r1, r3
 8000b46:	482c      	ldr	r0, [pc, #176]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000b48:	f002 f84a 	bl	8002be0 <HAL_TIM_ConfigClockSource>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b52:	f000 f9c1 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b56:	4828      	ldr	r0, [pc, #160]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000b58:	f001 fad5 	bl	8002106 <HAL_TIM_PWM_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b62:	f000 f9b9 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b72:	4619      	mov	r1, r3
 8000b74:	4820      	ldr	r0, [pc, #128]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000b76:	f002 fdf5 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b80:	f000 f9aa 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b84:	2360      	movs	r3, #96	@ 0x60
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b90:	2300      	movs	r3, #0
 8000b92:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4813      	ldr	r0, [pc, #76]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000baa:	f001 ff57 	bl	8002a5c <HAL_TIM_PWM_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000bb4:	f000 f990 	bl	8000ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000bdc:	f002 fe20 	bl	8003820 <HAL_TIMEx_ConfigBreakDeadTime>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000be6:	f000 f977 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bea:	4803      	ldr	r0, [pc, #12]	@ (8000bf8 <MX_TIM1_Init+0x138>)
 8000bec:	f000 fa22 	bl	8001034 <HAL_TIM_MspPostInit>

}
 8000bf0:	bf00      	nop
 8000bf2:	3758      	adds	r7, #88	@ 0x58
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000030 	.word	0x20000030
 8000bfc:	40012c00 	.word	0x40012c00

08000c00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	@ 0x40
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d34 <MX_TIM2_Init+0x134>)
 8000c3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c42:	4b3c      	ldr	r3, [pc, #240]	@ (8000d34 <MX_TIM2_Init+0x134>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b3a      	ldr	r3, [pc, #232]	@ (8000d34 <MX_TIM2_Init+0x134>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c4e:	4b39      	ldr	r3, [pc, #228]	@ (8000d34 <MX_TIM2_Init+0x134>)
 8000c50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b37      	ldr	r3, [pc, #220]	@ (8000d34 <MX_TIM2_Init+0x134>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5c:	4b35      	ldr	r3, [pc, #212]	@ (8000d34 <MX_TIM2_Init+0x134>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c62:	4834      	ldr	r0, [pc, #208]	@ (8000d34 <MX_TIM2_Init+0x134>)
 8000c64:	f001 fa00 	bl	8002068 <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c6e:	f000 f933 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c76:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	482d      	ldr	r0, [pc, #180]	@ (8000d34 <MX_TIM2_Init+0x134>)
 8000c80:	f001 ffae 	bl	8002be0 <HAL_TIM_ConfigClockSource>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c8a:	f000 f925 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c8e:	4829      	ldr	r0, [pc, #164]	@ (8000d34 <MX_TIM2_Init+0x134>)
 8000c90:	f001 fb34 	bl	80022fc <HAL_TIM_IC_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000c9a:	f000 f91d 	bl	8000ed8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000ca2:	2350      	movs	r3, #80	@ 0x50
 8000ca4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481e      	ldr	r0, [pc, #120]	@ (8000d34 <MX_TIM2_Init+0x134>)
 8000cba:	f002 f858 	bl	8002d6e <HAL_TIM_SlaveConfigSynchro>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000cc4:	f000 f908 	bl	8000ed8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4814      	ldr	r0, [pc, #80]	@ (8000d34 <MX_TIM2_Init+0x134>)
 8000ce2:	f001 fe1f 	bl	8002924 <HAL_TIM_IC_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000cec:	f000 f8f4 	bl	8000ed8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <MX_TIM2_Init+0x134>)
 8000d02:	f001 fe0f 	bl	8002924 <HAL_TIM_IC_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8000d0c:	f000 f8e4 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_TIM2_Init+0x134>)
 8000d1e:	f002 fd21 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8000d28:	f000 f8d6 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	3740      	adds	r7, #64	@ 0x40
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000078 	.word	0x20000078

08000d38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <MX_USART1_UART_Init+0x50>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d44:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d70:	f002 fdb9 	bl	80038e6 <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d7a:	f000 f8ad 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000c0 	.word	0x200000c0
 8000d88:	40013800 	.word	0x40013800

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db8:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000dbe:	f043 0320 	orr.w	r3, r3, #32
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0320 	and.w	r3, r3, #32
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a11      	ldr	r2, [pc, #68]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <MX_GPIO_Init+0x90>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dee:	480c      	ldr	r0, [pc, #48]	@ (8000e20 <MX_GPIO_Init+0x94>)
 8000df0:	f000 fd12 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8000df4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4804      	ldr	r0, [pc, #16]	@ (8000e20 <MX_GPIO_Init+0x94>)
 8000e0e:	f000 fb7f 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40011000 	.word	0x40011000

08000e24 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e24:	b5b0      	push	{r4, r5, r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e34:	d13f      	bne.n	8000eb6 <HAL_TIM_IC_CaptureCallback+0x92>
    {
        CycleTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e36:	2100      	movs	r1, #0
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f001 ffdb 	bl	8002df4 <HAL_TIM_ReadCapturedValue>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000e42:	6013      	str	r3, [r2, #0]
        if (CycleTime != 0)
 8000e44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d034      	beq.n	8000eb6 <HAL_TIM_IC_CaptureCallback+0x92>
        {
            Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100.0)/CycleTime;
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f001 ffd0 	bl	8002df4 <HAL_TIM_ReadCapturedValue>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff faba 	bl	80003d0 <__aeabi_ui2d>
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000e62:	f7ff fb2f 	bl	80004c4 <__aeabi_dmul>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4614      	mov	r4, r2
 8000e6c:	461d      	mov	r5, r3
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff faac 	bl	80003d0 <__aeabi_ui2d>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	4629      	mov	r1, r5
 8000e80:	f7ff fc4a 	bl	8000718 <__aeabi_ddiv>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f7ff fd2c 	bl	80008e8 <__aeabi_d2f>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000e94:	6013      	str	r3, [r2, #0]
            Frequency = (F_CLK/CycleTime);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8000ecc <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000ea2:	6013      	str	r3, [r2, #0]

            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Duty);
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000eaa:	6814      	ldr	r4, [r2, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fd6b 	bl	8000988 <__aeabi_f2uiz>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6363      	str	r3, [r4, #52]	@ 0x34
        }
    }
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000010c 	.word	0x2000010c
 8000ec4:	40590000 	.word	0x40590000
 8000ec8:	20000110 	.word	0x20000110
 8000ecc:	044aa200 	.word	0x044aa200
 8000ed0:	20000108 	.word	0x20000108
 8000ed4:	20000030 	.word	0x20000030

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <Error_Handler+0x8>

08000ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <HAL_MspInit+0x5c>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <HAL_MspInit+0x5c>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6193      	str	r3, [r2, #24]
 8000ef6:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_MspInit+0x5c>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <HAL_MspInit+0x5c>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <HAL_MspInit+0x5c>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0c:	61d3      	str	r3, [r2, #28]
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <HAL_MspInit+0x5c>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_MspInit+0x60>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <HAL_MspInit+0x60>)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000

08000f48 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a09      	ldr	r2, [pc, #36]	@ (8000f7c <HAL_CRC_MspInit+0x34>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10b      	bne.n	8000f72 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <HAL_CRC_MspInit+0x38>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <HAL_CRC_MspInit+0x38>)
 8000f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f64:	6153      	str	r3, [r2, #20]
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_CRC_MspInit+0x38>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	40023000 	.word	0x40023000
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a22      	ldr	r2, [pc, #136]	@ (8001028 <HAL_TIM_Base_MspInit+0xa4>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d10c      	bne.n	8000fbe <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa4:	4b21      	ldr	r3, [pc, #132]	@ (800102c <HAL_TIM_Base_MspInit+0xa8>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a20      	ldr	r2, [pc, #128]	@ (800102c <HAL_TIM_Base_MspInit+0xa8>)
 8000faa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <HAL_TIM_Base_MspInit+0xa8>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fbc:	e030      	b.n	8001020 <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM2)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fc6:	d12b      	bne.n	8001020 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <HAL_TIM_Base_MspInit+0xa8>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	@ (800102c <HAL_TIM_Base_MspInit+0xa8>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	61d3      	str	r3, [r2, #28]
 8000fd4:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_TIM_Base_MspInit+0xa8>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_TIM_Base_MspInit+0xa8>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a11      	ldr	r2, [pc, #68]	@ (800102c <HAL_TIM_Base_MspInit+0xa8>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_TIM_Base_MspInit+0xa8>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0318 	add.w	r3, r7, #24
 8001008:	4619      	mov	r1, r3
 800100a:	4809      	ldr	r0, [pc, #36]	@ (8001030 <HAL_TIM_Base_MspInit+0xac>)
 800100c:	f000 fa80 	bl	8001510 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	201c      	movs	r0, #28
 8001016:	f000 fa28 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800101a:	201c      	movs	r0, #28
 800101c:	f000 fa41 	bl	80014a2 <HAL_NVIC_EnableIRQ>
}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	@ 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40012c00 	.word	0x40012c00
 800102c:	40021000 	.word	0x40021000
 8001030:	40010800 	.word	0x40010800

08001034 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a10      	ldr	r2, [pc, #64]	@ (8001090 <HAL_TIM_MspPostInit+0x5c>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d118      	bne.n	8001086 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <HAL_TIM_MspPostInit+0x60>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a0e      	ldr	r2, [pc, #56]	@ (8001094 <HAL_TIM_MspPostInit+0x60>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <HAL_TIM_MspPostInit+0x60>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800106c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001070:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2302      	movs	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	@ (8001098 <HAL_TIM_MspPostInit+0x64>)
 8001082:	f000 fa45 	bl	8001510 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40012c00 	.word	0x40012c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40010800 	.word	0x40010800

0800109c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001128 <HAL_UART_MspInit+0x8c>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d131      	bne.n	8001120 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <HAL_UART_MspInit+0x90>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a1a      	ldr	r2, [pc, #104]	@ (800112c <HAL_UART_MspInit+0x90>)
 80010c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b18      	ldr	r3, [pc, #96]	@ (800112c <HAL_UART_MspInit+0x90>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b15      	ldr	r3, [pc, #84]	@ (800112c <HAL_UART_MspInit+0x90>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <HAL_UART_MspInit+0x90>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_UART_MspInit+0x90>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	4619      	mov	r1, r3
 8001100:	480b      	ldr	r0, [pc, #44]	@ (8001130 <HAL_UART_MspInit+0x94>)
 8001102:	f000 fa05 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001106:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800110a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4619      	mov	r1, r3
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <HAL_UART_MspInit+0x94>)
 800111c:	f000 f9f8 	bl	8001510 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40013800 	.word	0x40013800
 800112c:	40021000 	.word	0x40021000
 8001130:	40010800 	.word	0x40010800

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <NMI_Handler+0x4>

0800113c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <MemManage_Handler+0x4>

0800114c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <UsageFault_Handler+0x4>

0800115c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001184:	f000 f87e 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}

0800118c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <TIM2_IRQHandler+0x10>)
 8001192:	f001 fad7 	bl	8002744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000078 	.word	0x20000078

080011a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ac:	f7ff fff8 	bl	80011a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b0:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011b2:	490c      	ldr	r1, [pc, #48]	@ (80011e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011b4:	4a0c      	ldr	r2, [pc, #48]	@ (80011e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a09      	ldr	r2, [pc, #36]	@ (80011ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011c8:	4c09      	ldr	r4, [pc, #36]	@ (80011f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d6:	f002 fc6d 	bl	8003ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011da:	f7ff fbf5 	bl	80009c8 <main>
  bx lr
 80011de:	4770      	bx	lr
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011e8:	08003b48 	.word	0x08003b48
  ldr r2, =_sbss
 80011ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011f0:	20000118 	.word	0x20000118

080011f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC1_2_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <HAL_Init+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <HAL_Init+0x28>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f923 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	200f      	movs	r0, #15
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fe66 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f93b 	bl	80014be <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 f903 	bl	800146a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	@ (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000000 	.word	0x20000000
 800127c:	20000008 	.word	0x20000008
 8001280:	20000004 	.word	0x20000004

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_IncTick+0x1c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <HAL_IncTick+0x20>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a03      	ldr	r2, [pc, #12]	@ (80012a4 <HAL_IncTick+0x20>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000114 	.word	0x20000114

080012a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <HAL_GetTick+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	20000114 	.word	0x20000114

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4906      	ldr	r1, [pc, #24]	@ (8001354 <__NVIC_EnableIRQ+0x34>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100

08001358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	@ (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	@ (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	@ 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	4313      	orrs	r3, r2
         );
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	@ 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff90 	bl	8001358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff2d 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800147c:	f7ff ff42 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff ff90 	bl	80013ac <NVIC_EncodePriority>
 800148c:	4602      	mov	r2, r0
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff5f 	bl	8001358 <__NVIC_SetPriority>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff35 	bl	8001320 <__NVIC_EnableIRQ>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffa2 	bl	8001410 <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e00e      	b.n	8001506 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	795b      	ldrb	r3, [r3, #5]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d105      	bne.n	80014fe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fd25 	bl	8000f48 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b08b      	sub	sp, #44	@ 0x2c
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001522:	e169      	b.n	80017f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001524:	2201      	movs	r2, #1
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	429a      	cmp	r2, r3
 800153e:	f040 8158 	bne.w	80017f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4a9a      	ldr	r2, [pc, #616]	@ (80017b0 <HAL_GPIO_Init+0x2a0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d05e      	beq.n	800160a <HAL_GPIO_Init+0xfa>
 800154c:	4a98      	ldr	r2, [pc, #608]	@ (80017b0 <HAL_GPIO_Init+0x2a0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d875      	bhi.n	800163e <HAL_GPIO_Init+0x12e>
 8001552:	4a98      	ldr	r2, [pc, #608]	@ (80017b4 <HAL_GPIO_Init+0x2a4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d058      	beq.n	800160a <HAL_GPIO_Init+0xfa>
 8001558:	4a96      	ldr	r2, [pc, #600]	@ (80017b4 <HAL_GPIO_Init+0x2a4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d86f      	bhi.n	800163e <HAL_GPIO_Init+0x12e>
 800155e:	4a96      	ldr	r2, [pc, #600]	@ (80017b8 <HAL_GPIO_Init+0x2a8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d052      	beq.n	800160a <HAL_GPIO_Init+0xfa>
 8001564:	4a94      	ldr	r2, [pc, #592]	@ (80017b8 <HAL_GPIO_Init+0x2a8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d869      	bhi.n	800163e <HAL_GPIO_Init+0x12e>
 800156a:	4a94      	ldr	r2, [pc, #592]	@ (80017bc <HAL_GPIO_Init+0x2ac>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d04c      	beq.n	800160a <HAL_GPIO_Init+0xfa>
 8001570:	4a92      	ldr	r2, [pc, #584]	@ (80017bc <HAL_GPIO_Init+0x2ac>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d863      	bhi.n	800163e <HAL_GPIO_Init+0x12e>
 8001576:	4a92      	ldr	r2, [pc, #584]	@ (80017c0 <HAL_GPIO_Init+0x2b0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d046      	beq.n	800160a <HAL_GPIO_Init+0xfa>
 800157c:	4a90      	ldr	r2, [pc, #576]	@ (80017c0 <HAL_GPIO_Init+0x2b0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d85d      	bhi.n	800163e <HAL_GPIO_Init+0x12e>
 8001582:	2b12      	cmp	r3, #18
 8001584:	d82a      	bhi.n	80015dc <HAL_GPIO_Init+0xcc>
 8001586:	2b12      	cmp	r3, #18
 8001588:	d859      	bhi.n	800163e <HAL_GPIO_Init+0x12e>
 800158a:	a201      	add	r2, pc, #4	@ (adr r2, 8001590 <HAL_GPIO_Init+0x80>)
 800158c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001590:	0800160b 	.word	0x0800160b
 8001594:	080015e5 	.word	0x080015e5
 8001598:	080015f7 	.word	0x080015f7
 800159c:	08001639 	.word	0x08001639
 80015a0:	0800163f 	.word	0x0800163f
 80015a4:	0800163f 	.word	0x0800163f
 80015a8:	0800163f 	.word	0x0800163f
 80015ac:	0800163f 	.word	0x0800163f
 80015b0:	0800163f 	.word	0x0800163f
 80015b4:	0800163f 	.word	0x0800163f
 80015b8:	0800163f 	.word	0x0800163f
 80015bc:	0800163f 	.word	0x0800163f
 80015c0:	0800163f 	.word	0x0800163f
 80015c4:	0800163f 	.word	0x0800163f
 80015c8:	0800163f 	.word	0x0800163f
 80015cc:	0800163f 	.word	0x0800163f
 80015d0:	0800163f 	.word	0x0800163f
 80015d4:	080015ed 	.word	0x080015ed
 80015d8:	08001601 	.word	0x08001601
 80015dc:	4a79      	ldr	r2, [pc, #484]	@ (80017c4 <HAL_GPIO_Init+0x2b4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015e2:	e02c      	b.n	800163e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	623b      	str	r3, [r7, #32]
          break;
 80015ea:	e029      	b.n	8001640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	3304      	adds	r3, #4
 80015f2:	623b      	str	r3, [r7, #32]
          break;
 80015f4:	e024      	b.n	8001640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	3308      	adds	r3, #8
 80015fc:	623b      	str	r3, [r7, #32]
          break;
 80015fe:	e01f      	b.n	8001640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	330c      	adds	r3, #12
 8001606:	623b      	str	r3, [r7, #32]
          break;
 8001608:	e01a      	b.n	8001640 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d102      	bne.n	8001618 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001612:	2304      	movs	r3, #4
 8001614:	623b      	str	r3, [r7, #32]
          break;
 8001616:	e013      	b.n	8001640 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d105      	bne.n	800162c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001620:	2308      	movs	r3, #8
 8001622:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	611a      	str	r2, [r3, #16]
          break;
 800162a:	e009      	b.n	8001640 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800162c:	2308      	movs	r3, #8
 800162e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	615a      	str	r2, [r3, #20]
          break;
 8001636:	e003      	b.n	8001640 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
          break;
 800163c:	e000      	b.n	8001640 <HAL_GPIO_Init+0x130>
          break;
 800163e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	2bff      	cmp	r3, #255	@ 0xff
 8001644:	d801      	bhi.n	800164a <HAL_GPIO_Init+0x13a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	e001      	b.n	800164e <HAL_GPIO_Init+0x13e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3304      	adds	r3, #4
 800164e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2bff      	cmp	r3, #255	@ 0xff
 8001654:	d802      	bhi.n	800165c <HAL_GPIO_Init+0x14c>
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	e002      	b.n	8001662 <HAL_GPIO_Init+0x152>
 800165c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165e:	3b08      	subs	r3, #8
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	210f      	movs	r1, #15
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	401a      	ands	r2, r3
 8001674:	6a39      	ldr	r1, [r7, #32]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	431a      	orrs	r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 80b1 	beq.w	80017f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001690:	4b4d      	ldr	r3, [pc, #308]	@ (80017c8 <HAL_GPIO_Init+0x2b8>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a4c      	ldr	r2, [pc, #304]	@ (80017c8 <HAL_GPIO_Init+0x2b8>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b4a      	ldr	r3, [pc, #296]	@ (80017c8 <HAL_GPIO_Init+0x2b8>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016a8:	4a48      	ldr	r2, [pc, #288]	@ (80017cc <HAL_GPIO_Init+0x2bc>)
 80016aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3302      	adds	r3, #2
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	220f      	movs	r2, #15
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	4013      	ands	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a40      	ldr	r2, [pc, #256]	@ (80017d0 <HAL_GPIO_Init+0x2c0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d013      	beq.n	80016fc <HAL_GPIO_Init+0x1ec>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a3f      	ldr	r2, [pc, #252]	@ (80017d4 <HAL_GPIO_Init+0x2c4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d00d      	beq.n	80016f8 <HAL_GPIO_Init+0x1e8>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a3e      	ldr	r2, [pc, #248]	@ (80017d8 <HAL_GPIO_Init+0x2c8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d007      	beq.n	80016f4 <HAL_GPIO_Init+0x1e4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a3d      	ldr	r2, [pc, #244]	@ (80017dc <HAL_GPIO_Init+0x2cc>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d101      	bne.n	80016f0 <HAL_GPIO_Init+0x1e0>
 80016ec:	2303      	movs	r3, #3
 80016ee:	e006      	b.n	80016fe <HAL_GPIO_Init+0x1ee>
 80016f0:	2304      	movs	r3, #4
 80016f2:	e004      	b.n	80016fe <HAL_GPIO_Init+0x1ee>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e002      	b.n	80016fe <HAL_GPIO_Init+0x1ee>
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <HAL_GPIO_Init+0x1ee>
 80016fc:	2300      	movs	r3, #0
 80016fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001700:	f002 0203 	and.w	r2, r2, #3
 8001704:	0092      	lsls	r2, r2, #2
 8001706:	4093      	lsls	r3, r2
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800170e:	492f      	ldr	r1, [pc, #188]	@ (80017cc <HAL_GPIO_Init+0x2bc>)
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	089b      	lsrs	r3, r3, #2
 8001714:	3302      	adds	r3, #2
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001728:	4b2d      	ldr	r3, [pc, #180]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	492c      	ldr	r1, [pc, #176]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	608b      	str	r3, [r1, #8]
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001736:	4b2a      	ldr	r3, [pc, #168]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	43db      	mvns	r3, r3
 800173e:	4928      	ldr	r1, [pc, #160]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 8001740:	4013      	ands	r3, r2
 8001742:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001750:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	4922      	ldr	r1, [pc, #136]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	60cb      	str	r3, [r1, #12]
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800175e:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	43db      	mvns	r3, r3
 8001766:	491e      	ldr	r1, [pc, #120]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 8001768:	4013      	ands	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001778:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4918      	ldr	r1, [pc, #96]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001786:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	43db      	mvns	r3, r3
 800178e:	4914      	ldr	r1, [pc, #80]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 8001790:	4013      	ands	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d021      	beq.n	80017e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017a0:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	490e      	ldr	r1, [pc, #56]	@ (80017e0 <HAL_GPIO_Init+0x2d0>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]
 80017ac:	e021      	b.n	80017f2 <HAL_GPIO_Init+0x2e2>
 80017ae:	bf00      	nop
 80017b0:	10320000 	.word	0x10320000
 80017b4:	10310000 	.word	0x10310000
 80017b8:	10220000 	.word	0x10220000
 80017bc:	10210000 	.word	0x10210000
 80017c0:	10120000 	.word	0x10120000
 80017c4:	10110000 	.word	0x10110000
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010000 	.word	0x40010000
 80017d0:	40010800 	.word	0x40010800
 80017d4:	40010c00 	.word	0x40010c00
 80017d8:	40011000 	.word	0x40011000
 80017dc:	40011400 	.word	0x40011400
 80017e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_GPIO_Init+0x304>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	4909      	ldr	r1, [pc, #36]	@ (8001814 <HAL_GPIO_Init+0x304>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f4:	3301      	adds	r3, #1
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	f47f ae8e 	bne.w	8001524 <HAL_GPIO_Init+0x14>
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	372c      	adds	r7, #44	@ 0x2c
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	40010400 	.word	0x40010400

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
 8001824:	4613      	mov	r3, r2
 8001826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	041a      	lsls	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	611a      	str	r2, [r3, #16]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e272      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8087 	beq.w	8001976 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001868:	4b92      	ldr	r3, [pc, #584]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b04      	cmp	r3, #4
 8001872:	d00c      	beq.n	800188e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001874:	4b8f      	ldr	r3, [pc, #572]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b08      	cmp	r3, #8
 800187e:	d112      	bne.n	80018a6 <HAL_RCC_OscConfig+0x5e>
 8001880:	4b8c      	ldr	r3, [pc, #560]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188c:	d10b      	bne.n	80018a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188e:	4b89      	ldr	r3, [pc, #548]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d06c      	beq.n	8001974 <HAL_RCC_OscConfig+0x12c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d168      	bne.n	8001974 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e24c      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x76>
 80018b0:	4b80      	ldr	r3, [pc, #512]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	e02e      	b.n	800191c <HAL_RCC_OscConfig+0xd4>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x98>
 80018c6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a7a      	ldr	r2, [pc, #488]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b78      	ldr	r3, [pc, #480]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a77      	ldr	r2, [pc, #476]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e01d      	b.n	800191c <HAL_RCC_OscConfig+0xd4>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0xbc>
 80018ea:	4b72      	ldr	r3, [pc, #456]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a71      	ldr	r2, [pc, #452]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b6f      	ldr	r3, [pc, #444]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a6e      	ldr	r2, [pc, #440]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0xd4>
 8001904:	4b6b      	ldr	r3, [pc, #428]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a6a      	ldr	r2, [pc, #424]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 800190a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b68      	ldr	r3, [pc, #416]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a67      	ldr	r2, [pc, #412]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800191a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d013      	beq.n	800194c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fcc0 	bl	80012a8 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fcbc 	bl	80012a8 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	@ 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e200      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0xe4>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fcac 	bl	80012a8 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff fca8 	bl	80012a8 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	@ 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e1ec      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	4b53      	ldr	r3, [pc, #332]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x10c>
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d063      	beq.n	8001a4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001982:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00b      	beq.n	80019a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800198e:	4b49      	ldr	r3, [pc, #292]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b08      	cmp	r3, #8
 8001998:	d11c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x18c>
 800199a:	4b46      	ldr	r3, [pc, #280]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d116      	bne.n	80019d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a6:	4b43      	ldr	r3, [pc, #268]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_RCC_OscConfig+0x176>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e1c0      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4939      	ldr	r1, [pc, #228]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	e03a      	b.n	8001a4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d020      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019dc:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff fc61 	bl	80012a8 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ea:	f7ff fc5d 	bl	80012a8 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e1a1      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fc:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a08:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4927      	ldr	r1, [pc, #156]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]
 8001a1c:	e015      	b.n	8001a4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1e:	4b26      	ldr	r3, [pc, #152]	@ (8001ab8 <HAL_RCC_OscConfig+0x270>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fc40 	bl	80012a8 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fc3c 	bl	80012a8 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e180      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d03a      	beq.n	8001acc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d019      	beq.n	8001a92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5e:	4b17      	ldr	r3, [pc, #92]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a64:	f7ff fc20 	bl	80012a8 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fc1c 	bl	80012a8 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e160      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f000 face 	bl	800202c <RCC_Delay>
 8001a90:	e01c      	b.n	8001acc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7ff fc06 	bl	80012a8 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9e:	e00f      	b.n	8001ac0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fc02 	bl	80012a8 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d908      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e146      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	42420000 	.word	0x42420000
 8001abc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac0:	4b92      	ldr	r3, [pc, #584]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1e9      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80a6 	beq.w	8001c26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ade:	4b8b      	ldr	r3, [pc, #556]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10d      	bne.n	8001b06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b88      	ldr	r3, [pc, #544]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a87      	ldr	r2, [pc, #540]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	61d3      	str	r3, [r2, #28]
 8001af6:	4b85      	ldr	r3, [pc, #532]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b02:	2301      	movs	r3, #1
 8001b04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b06:	4b82      	ldr	r3, [pc, #520]	@ (8001d10 <HAL_RCC_OscConfig+0x4c8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d118      	bne.n	8001b44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b12:	4b7f      	ldr	r3, [pc, #508]	@ (8001d10 <HAL_RCC_OscConfig+0x4c8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a7e      	ldr	r2, [pc, #504]	@ (8001d10 <HAL_RCC_OscConfig+0x4c8>)
 8001b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff fbc3 	bl	80012a8 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b26:	f7ff fbbf 	bl	80012a8 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b64      	cmp	r3, #100	@ 0x64
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e103      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	4b75      	ldr	r3, [pc, #468]	@ (8001d10 <HAL_RCC_OscConfig+0x4c8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x312>
 8001b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a6e      	ldr	r2, [pc, #440]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6213      	str	r3, [r2, #32]
 8001b58:	e02d      	b.n	8001bb6 <HAL_RCC_OscConfig+0x36e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x334>
 8001b62:	4b6a      	ldr	r3, [pc, #424]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a69      	ldr	r2, [pc, #420]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	6213      	str	r3, [r2, #32]
 8001b6e:	4b67      	ldr	r3, [pc, #412]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a66      	ldr	r2, [pc, #408]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	f023 0304 	bic.w	r3, r3, #4
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	e01c      	b.n	8001bb6 <HAL_RCC_OscConfig+0x36e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b05      	cmp	r3, #5
 8001b82:	d10c      	bne.n	8001b9e <HAL_RCC_OscConfig+0x356>
 8001b84:	4b61      	ldr	r3, [pc, #388]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4a60      	ldr	r2, [pc, #384]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6213      	str	r3, [r2, #32]
 8001b90:	4b5e      	ldr	r3, [pc, #376]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a5d      	ldr	r2, [pc, #372]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	e00b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x36e>
 8001b9e:	4b5b      	ldr	r3, [pc, #364]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a5a      	ldr	r2, [pc, #360]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	4b58      	ldr	r3, [pc, #352]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a57      	ldr	r2, [pc, #348]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d015      	beq.n	8001bea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fb73 	bl	80012a8 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f7ff fb6f 	bl	80012a8 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e0b1      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0ee      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x37e>
 8001be8:	e014      	b.n	8001c14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bea:	f7ff fb5d 	bl	80012a8 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff fb59 	bl	80012a8 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e09b      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c08:	4b40      	ldr	r3, [pc, #256]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1ee      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d105      	bne.n	8001c26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8087 	beq.w	8001d3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c30:	4b36      	ldr	r3, [pc, #216]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d061      	beq.n	8001d00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d146      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c44:	4b33      	ldr	r3, [pc, #204]	@ (8001d14 <HAL_RCC_OscConfig+0x4cc>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fb2d 	bl	80012a8 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c52:	f7ff fb29 	bl	80012a8 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e06d      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c64:	4b29      	ldr	r3, [pc, #164]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c78:	d108      	bne.n	8001c8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c7a:	4b24      	ldr	r3, [pc, #144]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	4921      	ldr	r1, [pc, #132]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a19      	ldr	r1, [r3, #32]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	491b      	ldr	r1, [pc, #108]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <HAL_RCC_OscConfig+0x4cc>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff fafd 	bl	80012a8 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7ff faf9 	bl	80012a8 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e03d      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc4:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x46a>
 8001cd0:	e035      	b.n	8001d3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <HAL_RCC_OscConfig+0x4cc>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fae6 	bl	80012a8 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff fae2 	bl	80012a8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e026      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x498>
 8001cfe:	e01e      	b.n	8001d3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e019      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40007000 	.word	0x40007000
 8001d14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <HAL_RCC_OscConfig+0x500>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000

08001d4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0d0      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d60:	4b6a      	ldr	r3, [pc, #424]	@ (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d910      	bls.n	8001d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	4b67      	ldr	r3, [pc, #412]	@ (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 0207 	bic.w	r2, r3, #7
 8001d76:	4965      	ldr	r1, [pc, #404]	@ (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b63      	ldr	r3, [pc, #396]	@ (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0b8      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001da8:	4b59      	ldr	r3, [pc, #356]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4a58      	ldr	r2, [pc, #352]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001db2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc0:	4b53      	ldr	r3, [pc, #332]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4a52      	ldr	r2, [pc, #328]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001dca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dcc:	4b50      	ldr	r3, [pc, #320]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	494d      	ldr	r1, [pc, #308]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d040      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	4b47      	ldr	r3, [pc, #284]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d115      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e07f      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	4b41      	ldr	r3, [pc, #260]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e073      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e06b      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2a:	4b39      	ldr	r3, [pc, #228]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f023 0203 	bic.w	r2, r3, #3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4936      	ldr	r1, [pc, #216]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e3c:	f7ff fa34 	bl	80012a8 <HAL_GetTick>
 8001e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e44:	f7ff fa30 	bl	80012a8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e053      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 020c 	and.w	r2, r3, #12
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d1eb      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b27      	ldr	r3, [pc, #156]	@ (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d210      	bcs.n	8001e9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 0207 	bic.w	r2, r3, #7
 8001e82:	4922      	ldr	r1, [pc, #136]	@ (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8a:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e032      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea8:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4916      	ldr	r1, [pc, #88]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d009      	beq.n	8001eda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	490e      	ldr	r1, [pc, #56]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eda:	f000 f821 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	490a      	ldr	r1, [pc, #40]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001eec:	5ccb      	ldrb	r3, [r1, r3]
 8001eee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef2:	4a09      	ldr	r2, [pc, #36]	@ (8001f18 <HAL_RCC_ClockConfig+0x1cc>)
 8001ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ef6:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <HAL_RCC_ClockConfig+0x1d0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f992 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08003b14 	.word	0x08003b14
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000004 	.word	0x20000004

08001f20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d002      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x30>
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d003      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0x36>
 8001f4e:	e027      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f50:	4b19      	ldr	r3, [pc, #100]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f52:	613b      	str	r3, [r7, #16]
      break;
 8001f54:	e027      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	0c9b      	lsrs	r3, r3, #18
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	4a17      	ldr	r2, [pc, #92]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f60:	5cd3      	ldrb	r3, [r2, r3]
 8001f62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d010      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f6e:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	0c5b      	lsrs	r3, r3, #17
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	4a11      	ldr	r2, [pc, #68]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f7a:	5cd3      	ldrb	r3, [r2, r3]
 8001f7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f82:	fb03 f202 	mul.w	r2, r3, r2
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	e004      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f94:	fb02 f303 	mul.w	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	613b      	str	r3, [r7, #16]
      break;
 8001f9e:	e002      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fa2:	613b      	str	r3, [r7, #16]
      break;
 8001fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fa6:	693b      	ldr	r3, [r7, #16]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	007a1200 	.word	0x007a1200
 8001fbc:	08003b2c 	.word	0x08003b2c
 8001fc0:	08003b3c 	.word	0x08003b3c
 8001fc4:	003d0900 	.word	0x003d0900

08001fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fcc:	4b02      	ldr	r3, [pc, #8]	@ (8001fd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	20000000 	.word	0x20000000

08001fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fe0:	f7ff fff2 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4903      	ldr	r1, [pc, #12]	@ (8002000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08003b24 	.word	0x08003b24

08002004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002008:	f7ff ffde 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	0adb      	lsrs	r3, r3, #11
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4903      	ldr	r1, [pc, #12]	@ (8002028 <HAL_RCC_GetPCLK2Freq+0x24>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	08003b24 	.word	0x08003b24

0800202c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002034:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <RCC_Delay+0x34>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0a      	ldr	r2, [pc, #40]	@ (8002064 <RCC_Delay+0x38>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	0a5b      	lsrs	r3, r3, #9
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002048:	bf00      	nop
  }
  while (Delay --);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1e5a      	subs	r2, r3, #1
 800204e:	60fa      	str	r2, [r7, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f9      	bne.n	8002048 <RCC_Delay+0x1c>
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	20000000 	.word	0x20000000
 8002064:	10624dd3 	.word	0x10624dd3

08002068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e041      	b.n	80020fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe ff78 	bl	8000f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3304      	adds	r3, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f000 ff0c 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e041      	b.n	800219c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f839 	bl	80021a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3304      	adds	r3, #4
 8002142:	4619      	mov	r1, r3
 8002144:	4610      	mov	r0, r2
 8002146:	f000 febd 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <HAL_TIM_PWM_Start+0x24>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	bf14      	ite	ne
 80021d4:	2301      	movne	r3, #1
 80021d6:	2300      	moveq	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	e022      	b.n	8002222 <HAL_TIM_PWM_Start+0x6a>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d109      	bne.n	80021f6 <HAL_TIM_PWM_Start+0x3e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	e015      	b.n	8002222 <HAL_TIM_PWM_Start+0x6a>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d109      	bne.n	8002210 <HAL_TIM_PWM_Start+0x58>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b01      	cmp	r3, #1
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	e008      	b.n	8002222 <HAL_TIM_PWM_Start+0x6a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	bf14      	ite	ne
 800221c:	2301      	movne	r3, #1
 800221e:	2300      	moveq	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e05e      	b.n	80022e8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d104      	bne.n	800223a <HAL_TIM_PWM_Start+0x82>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002238:	e013      	b.n	8002262 <HAL_TIM_PWM_Start+0xaa>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b04      	cmp	r3, #4
 800223e:	d104      	bne.n	800224a <HAL_TIM_PWM_Start+0x92>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002248:	e00b      	b.n	8002262 <HAL_TIM_PWM_Start+0xaa>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b08      	cmp	r3, #8
 800224e:	d104      	bne.n	800225a <HAL_TIM_PWM_Start+0xa2>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002258:	e003      	b.n	8002262 <HAL_TIM_PWM_Start+0xaa>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2202      	movs	r2, #2
 800225e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2201      	movs	r2, #1
 8002268:	6839      	ldr	r1, [r7, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f001 fa55 	bl	800371a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1e      	ldr	r2, [pc, #120]	@ (80022f0 <HAL_TIM_PWM_Start+0x138>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d107      	bne.n	800228a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002288:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a18      	ldr	r2, [pc, #96]	@ (80022f0 <HAL_TIM_PWM_Start+0x138>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d00e      	beq.n	80022b2 <HAL_TIM_PWM_Start+0xfa>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800229c:	d009      	beq.n	80022b2 <HAL_TIM_PWM_Start+0xfa>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <HAL_TIM_PWM_Start+0x13c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d004      	beq.n	80022b2 <HAL_TIM_PWM_Start+0xfa>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a12      	ldr	r2, [pc, #72]	@ (80022f8 <HAL_TIM_PWM_Start+0x140>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d111      	bne.n	80022d6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b06      	cmp	r3, #6
 80022c2:	d010      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d4:	e007      	b.n	80022e6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40012c00 	.word	0x40012c00
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40000800 	.word	0x40000800

080022fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e041      	b.n	8002392 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f839 	bl	800239a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f000 fdc2 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d104      	bne.n	80023c6 <HAL_TIM_IC_Start+0x1a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	e013      	b.n	80023ee <HAL_TIM_IC_Start+0x42>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d104      	bne.n	80023d6 <HAL_TIM_IC_Start+0x2a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	e00b      	b.n	80023ee <HAL_TIM_IC_Start+0x42>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d104      	bne.n	80023e6 <HAL_TIM_IC_Start+0x3a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	e003      	b.n	80023ee <HAL_TIM_IC_Start+0x42>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d104      	bne.n	8002400 <HAL_TIM_IC_Start+0x54>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e013      	b.n	8002428 <HAL_TIM_IC_Start+0x7c>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b04      	cmp	r3, #4
 8002404:	d104      	bne.n	8002410 <HAL_TIM_IC_Start+0x64>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e00b      	b.n	8002428 <HAL_TIM_IC_Start+0x7c>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b08      	cmp	r3, #8
 8002414:	d104      	bne.n	8002420 <HAL_TIM_IC_Start+0x74>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e003      	b.n	8002428 <HAL_TIM_IC_Start+0x7c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002426:	b2db      	uxtb	r3, r3
 8002428:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d102      	bne.n	8002436 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002430:	7bbb      	ldrb	r3, [r7, #14]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d001      	beq.n	800243a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e06d      	b.n	8002516 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d104      	bne.n	800244a <HAL_TIM_IC_Start+0x9e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002448:	e013      	b.n	8002472 <HAL_TIM_IC_Start+0xc6>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b04      	cmp	r3, #4
 800244e:	d104      	bne.n	800245a <HAL_TIM_IC_Start+0xae>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002458:	e00b      	b.n	8002472 <HAL_TIM_IC_Start+0xc6>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b08      	cmp	r3, #8
 800245e:	d104      	bne.n	800246a <HAL_TIM_IC_Start+0xbe>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002468:	e003      	b.n	8002472 <HAL_TIM_IC_Start+0xc6>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2202      	movs	r2, #2
 800246e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <HAL_TIM_IC_Start+0xd6>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002480:	e013      	b.n	80024aa <HAL_TIM_IC_Start+0xfe>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d104      	bne.n	8002492 <HAL_TIM_IC_Start+0xe6>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002490:	e00b      	b.n	80024aa <HAL_TIM_IC_Start+0xfe>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d104      	bne.n	80024a2 <HAL_TIM_IC_Start+0xf6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024a0:	e003      	b.n	80024aa <HAL_TIM_IC_Start+0xfe>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2201      	movs	r2, #1
 80024b0:	6839      	ldr	r1, [r7, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 f931 	bl	800371a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a18      	ldr	r2, [pc, #96]	@ (8002520 <HAL_TIM_IC_Start+0x174>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00e      	beq.n	80024e0 <HAL_TIM_IC_Start+0x134>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ca:	d009      	beq.n	80024e0 <HAL_TIM_IC_Start+0x134>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a14      	ldr	r2, [pc, #80]	@ (8002524 <HAL_TIM_IC_Start+0x178>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_TIM_IC_Start+0x134>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a13      	ldr	r2, [pc, #76]	@ (8002528 <HAL_TIM_IC_Start+0x17c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d111      	bne.n	8002504 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d010      	beq.n	8002514 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002502:	e007      	b.n	8002514 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40000400 	.word	0x40000400
 8002528:	40000800 	.word	0x40000800

0800252c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d104      	bne.n	800254a <HAL_TIM_IC_Start_IT+0x1e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002546:	b2db      	uxtb	r3, r3
 8002548:	e013      	b.n	8002572 <HAL_TIM_IC_Start_IT+0x46>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d104      	bne.n	800255a <HAL_TIM_IC_Start_IT+0x2e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002556:	b2db      	uxtb	r3, r3
 8002558:	e00b      	b.n	8002572 <HAL_TIM_IC_Start_IT+0x46>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d104      	bne.n	800256a <HAL_TIM_IC_Start_IT+0x3e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002566:	b2db      	uxtb	r3, r3
 8002568:	e003      	b.n	8002572 <HAL_TIM_IC_Start_IT+0x46>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002570:	b2db      	uxtb	r3, r3
 8002572:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d104      	bne.n	8002584 <HAL_TIM_IC_Start_IT+0x58>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e013      	b.n	80025ac <HAL_TIM_IC_Start_IT+0x80>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2b04      	cmp	r3, #4
 8002588:	d104      	bne.n	8002594 <HAL_TIM_IC_Start_IT+0x68>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e00b      	b.n	80025ac <HAL_TIM_IC_Start_IT+0x80>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b08      	cmp	r3, #8
 8002598:	d104      	bne.n	80025a4 <HAL_TIM_IC_Start_IT+0x78>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e003      	b.n	80025ac <HAL_TIM_IC_Start_IT+0x80>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80025ae:	7bbb      	ldrb	r3, [r7, #14]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d102      	bne.n	80025ba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80025b4:	7b7b      	ldrb	r3, [r7, #13]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d001      	beq.n	80025be <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0b8      	b.n	8002730 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d104      	bne.n	80025ce <HAL_TIM_IC_Start_IT+0xa2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025cc:	e013      	b.n	80025f6 <HAL_TIM_IC_Start_IT+0xca>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d104      	bne.n	80025de <HAL_TIM_IC_Start_IT+0xb2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025dc:	e00b      	b.n	80025f6 <HAL_TIM_IC_Start_IT+0xca>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d104      	bne.n	80025ee <HAL_TIM_IC_Start_IT+0xc2>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025ec:	e003      	b.n	80025f6 <HAL_TIM_IC_Start_IT+0xca>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d104      	bne.n	8002606 <HAL_TIM_IC_Start_IT+0xda>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002604:	e013      	b.n	800262e <HAL_TIM_IC_Start_IT+0x102>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b04      	cmp	r3, #4
 800260a:	d104      	bne.n	8002616 <HAL_TIM_IC_Start_IT+0xea>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002614:	e00b      	b.n	800262e <HAL_TIM_IC_Start_IT+0x102>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b08      	cmp	r3, #8
 800261a:	d104      	bne.n	8002626 <HAL_TIM_IC_Start_IT+0xfa>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002624:	e003      	b.n	800262e <HAL_TIM_IC_Start_IT+0x102>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2202      	movs	r2, #2
 800262a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d841      	bhi.n	80026b8 <HAL_TIM_IC_Start_IT+0x18c>
 8002634:	a201      	add	r2, pc, #4	@ (adr r2, 800263c <HAL_TIM_IC_Start_IT+0x110>)
 8002636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263a:	bf00      	nop
 800263c:	08002671 	.word	0x08002671
 8002640:	080026b9 	.word	0x080026b9
 8002644:	080026b9 	.word	0x080026b9
 8002648:	080026b9 	.word	0x080026b9
 800264c:	08002683 	.word	0x08002683
 8002650:	080026b9 	.word	0x080026b9
 8002654:	080026b9 	.word	0x080026b9
 8002658:	080026b9 	.word	0x080026b9
 800265c:	08002695 	.word	0x08002695
 8002660:	080026b9 	.word	0x080026b9
 8002664:	080026b9 	.word	0x080026b9
 8002668:	080026b9 	.word	0x080026b9
 800266c:	080026a7 	.word	0x080026a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0202 	orr.w	r2, r2, #2
 800267e:	60da      	str	r2, [r3, #12]
      break;
 8002680:	e01d      	b.n	80026be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0204 	orr.w	r2, r2, #4
 8002690:	60da      	str	r2, [r3, #12]
      break;
 8002692:	e014      	b.n	80026be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0208 	orr.w	r2, r2, #8
 80026a2:	60da      	str	r2, [r3, #12]
      break;
 80026a4:	e00b      	b.n	80026be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0210 	orr.w	r2, r2, #16
 80026b4:	60da      	str	r2, [r3, #12]
      break;
 80026b6:	e002      	b.n	80026be <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      break;
 80026bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d134      	bne.n	800272e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2201      	movs	r2, #1
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 f824 	bl	800371a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a18      	ldr	r2, [pc, #96]	@ (8002738 <HAL_TIM_IC_Start_IT+0x20c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d00e      	beq.n	80026fa <HAL_TIM_IC_Start_IT+0x1ce>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e4:	d009      	beq.n	80026fa <HAL_TIM_IC_Start_IT+0x1ce>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a14      	ldr	r2, [pc, #80]	@ (800273c <HAL_TIM_IC_Start_IT+0x210>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d004      	beq.n	80026fa <HAL_TIM_IC_Start_IT+0x1ce>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a12      	ldr	r2, [pc, #72]	@ (8002740 <HAL_TIM_IC_Start_IT+0x214>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d111      	bne.n	800271e <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b06      	cmp	r3, #6
 800270a:	d010      	beq.n	800272e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271c:	e007      	b.n	800272e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0201 	orr.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40012c00 	.word	0x40012c00
 800273c:	40000400 	.word	0x40000400
 8002740:	40000800 	.word	0x40000800

08002744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d020      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01b      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0202 	mvn.w	r2, #2
 8002778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe fb48 	bl	8000e24 <HAL_TIM_IC_CaptureCallback>
 8002794:	e005      	b.n	80027a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fb79 	bl	8002e8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fb7f 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d020      	beq.n	80027f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01b      	beq.n	80027f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0204 	mvn.w	r2, #4
 80027c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2202      	movs	r2, #2
 80027ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fe fb22 	bl	8000e24 <HAL_TIM_IC_CaptureCallback>
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fb53 	bl	8002e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fb59 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d020      	beq.n	8002840 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01b      	beq.n	8002840 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0208 	mvn.w	r2, #8
 8002810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2204      	movs	r2, #4
 8002816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fe fafc 	bl	8000e24 <HAL_TIM_IC_CaptureCallback>
 800282c:	e005      	b.n	800283a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fb2d 	bl	8002e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 fb33 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b00      	cmp	r3, #0
 8002848:	d020      	beq.n	800288c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01b      	beq.n	800288c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0210 	mvn.w	r2, #16
 800285c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2208      	movs	r2, #8
 8002862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe fad6 	bl	8000e24 <HAL_TIM_IC_CaptureCallback>
 8002878:	e005      	b.n	8002886 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fb07 	bl	8002e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fb0d 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00c      	beq.n	80028b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0201 	mvn.w	r2, #1
 80028a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fae6 	bl	8002e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00c      	beq.n	80028d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f001 f800 	bl	80038d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00c      	beq.n	80028f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fadd 	bl	8002eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00c      	beq.n	800291c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0220 	mvn.w	r2, #32
 8002914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 ffd3 	bl	80038c2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_TIM_IC_ConfigChannel+0x1e>
 800293e:	2302      	movs	r3, #2
 8002940:	e088      	b.n	8002a54 <HAL_TIM_IC_ConfigChannel+0x130>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d11b      	bne.n	8002988 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002960:	f000 fd38 	bl	80033d4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 020c 	bic.w	r2, r2, #12
 8002972:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6999      	ldr	r1, [r3, #24]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	619a      	str	r2, [r3, #24]
 8002986:	e060      	b.n	8002a4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b04      	cmp	r3, #4
 800298c:	d11c      	bne.n	80029c8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800299e:	f000 fda1 	bl	80034e4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80029b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6999      	ldr	r1, [r3, #24]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	021a      	lsls	r2, r3, #8
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	619a      	str	r2, [r3, #24]
 80029c6:	e040      	b.n	8002a4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d11b      	bne.n	8002a06 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80029de:	f000 fdec 	bl	80035ba <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 020c 	bic.w	r2, r2, #12
 80029f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69d9      	ldr	r1, [r3, #28]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	61da      	str	r2, [r3, #28]
 8002a04:	e021      	b.n	8002a4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b0c      	cmp	r3, #12
 8002a0a:	d11c      	bne.n	8002a46 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002a1c:	f000 fe08 	bl	8003630 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69da      	ldr	r2, [r3, #28]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002a2e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69d9      	ldr	r1, [r3, #28]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	021a      	lsls	r2, r3, #8
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	61da      	str	r2, [r3, #28]
 8002a44:	e001      	b.n	8002a4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e0ae      	b.n	8002bd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	f200 809f 	bhi.w	8002bc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002ac5 	.word	0x08002ac5
 8002a94:	08002bc9 	.word	0x08002bc9
 8002a98:	08002bc9 	.word	0x08002bc9
 8002a9c:	08002bc9 	.word	0x08002bc9
 8002aa0:	08002b05 	.word	0x08002b05
 8002aa4:	08002bc9 	.word	0x08002bc9
 8002aa8:	08002bc9 	.word	0x08002bc9
 8002aac:	08002bc9 	.word	0x08002bc9
 8002ab0:	08002b47 	.word	0x08002b47
 8002ab4:	08002bc9 	.word	0x08002bc9
 8002ab8:	08002bc9 	.word	0x08002bc9
 8002abc:	08002bc9 	.word	0x08002bc9
 8002ac0:	08002b87 	.word	0x08002b87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fa68 	bl	8002fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0208 	orr.w	r2, r2, #8
 8002ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0204 	bic.w	r2, r2, #4
 8002aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6999      	ldr	r1, [r3, #24]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	619a      	str	r2, [r3, #24]
      break;
 8002b02:	e064      	b.n	8002bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 faae 	bl	800306c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6999      	ldr	r1, [r3, #24]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	021a      	lsls	r2, r3, #8
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	619a      	str	r2, [r3, #24]
      break;
 8002b44:	e043      	b.n	8002bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 faf7 	bl	8003140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0208 	orr.w	r2, r2, #8
 8002b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69da      	ldr	r2, [r3, #28]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0204 	bic.w	r2, r2, #4
 8002b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69d9      	ldr	r1, [r3, #28]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	61da      	str	r2, [r3, #28]
      break;
 8002b84:	e023      	b.n	8002bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fb41 	bl	8003214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69d9      	ldr	r1, [r3, #28]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	021a      	lsls	r2, r3, #8
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	61da      	str	r2, [r3, #28]
      break;
 8002bc6:	e002      	b.n	8002bce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	75fb      	strb	r3, [r7, #23]
      break;
 8002bcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_TIM_ConfigClockSource+0x1c>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e0b4      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x186>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c34:	d03e      	beq.n	8002cb4 <HAL_TIM_ConfigClockSource+0xd4>
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c3a:	f200 8087 	bhi.w	8002d4c <HAL_TIM_ConfigClockSource+0x16c>
 8002c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c42:	f000 8086 	beq.w	8002d52 <HAL_TIM_ConfigClockSource+0x172>
 8002c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c4a:	d87f      	bhi.n	8002d4c <HAL_TIM_ConfigClockSource+0x16c>
 8002c4c:	2b70      	cmp	r3, #112	@ 0x70
 8002c4e:	d01a      	beq.n	8002c86 <HAL_TIM_ConfigClockSource+0xa6>
 8002c50:	2b70      	cmp	r3, #112	@ 0x70
 8002c52:	d87b      	bhi.n	8002d4c <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b60      	cmp	r3, #96	@ 0x60
 8002c56:	d050      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x11a>
 8002c58:	2b60      	cmp	r3, #96	@ 0x60
 8002c5a:	d877      	bhi.n	8002d4c <HAL_TIM_ConfigClockSource+0x16c>
 8002c5c:	2b50      	cmp	r3, #80	@ 0x50
 8002c5e:	d03c      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0xfa>
 8002c60:	2b50      	cmp	r3, #80	@ 0x50
 8002c62:	d873      	bhi.n	8002d4c <HAL_TIM_ConfigClockSource+0x16c>
 8002c64:	2b40      	cmp	r3, #64	@ 0x40
 8002c66:	d058      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x13a>
 8002c68:	2b40      	cmp	r3, #64	@ 0x40
 8002c6a:	d86f      	bhi.n	8002d4c <HAL_TIM_ConfigClockSource+0x16c>
 8002c6c:	2b30      	cmp	r3, #48	@ 0x30
 8002c6e:	d064      	beq.n	8002d3a <HAL_TIM_ConfigClockSource+0x15a>
 8002c70:	2b30      	cmp	r3, #48	@ 0x30
 8002c72:	d86b      	bhi.n	8002d4c <HAL_TIM_ConfigClockSource+0x16c>
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d060      	beq.n	8002d3a <HAL_TIM_ConfigClockSource+0x15a>
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d867      	bhi.n	8002d4c <HAL_TIM_ConfigClockSource+0x16c>
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d05c      	beq.n	8002d3a <HAL_TIM_ConfigClockSource+0x15a>
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d05a      	beq.n	8002d3a <HAL_TIM_ConfigClockSource+0x15a>
 8002c84:	e062      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c96:	f000 fd21 	bl	80036dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ca8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	609a      	str	r2, [r3, #8]
      break;
 8002cb2:	e04f      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cc4:	f000 fd0a 	bl	80036dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cd6:	609a      	str	r2, [r3, #8]
      break;
 8002cd8:	e03c      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f000 fbce 	bl	8003488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2150      	movs	r1, #80	@ 0x50
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fcd8 	bl	80036a8 <TIM_ITRx_SetConfig>
      break;
 8002cf8:	e02c      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d06:	461a      	mov	r2, r3
 8002d08:	f000 fc28 	bl	800355c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2160      	movs	r1, #96	@ 0x60
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fcc8 	bl	80036a8 <TIM_ITRx_SetConfig>
      break;
 8002d18:	e01c      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d26:	461a      	mov	r2, r3
 8002d28:	f000 fbae 	bl	8003488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2140      	movs	r1, #64	@ 0x40
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fcb8 	bl	80036a8 <TIM_ITRx_SetConfig>
      break;
 8002d38:	e00c      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4619      	mov	r1, r3
 8002d44:	4610      	mov	r0, r2
 8002d46:	f000 fcaf 	bl	80036a8 <TIM_ITRx_SetConfig>
      break;
 8002d4a:	e003      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d50:	e000      	b.n	8002d54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e031      	b.n	8002dea <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fa89 	bl	80032b0 <TIM_SlaveTimer_SetConfig>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d009      	beq.n	8002db8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e018      	b.n	8002dea <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002dd6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b0c      	cmp	r3, #12
 8002e06:	d831      	bhi.n	8002e6c <HAL_TIM_ReadCapturedValue+0x78>
 8002e08:	a201      	add	r2, pc, #4	@ (adr r2, 8002e10 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0e:	bf00      	nop
 8002e10:	08002e45 	.word	0x08002e45
 8002e14:	08002e6d 	.word	0x08002e6d
 8002e18:	08002e6d 	.word	0x08002e6d
 8002e1c:	08002e6d 	.word	0x08002e6d
 8002e20:	08002e4f 	.word	0x08002e4f
 8002e24:	08002e6d 	.word	0x08002e6d
 8002e28:	08002e6d 	.word	0x08002e6d
 8002e2c:	08002e6d 	.word	0x08002e6d
 8002e30:	08002e59 	.word	0x08002e59
 8002e34:	08002e6d 	.word	0x08002e6d
 8002e38:	08002e6d 	.word	0x08002e6d
 8002e3c:	08002e6d 	.word	0x08002e6d
 8002e40:	08002e63 	.word	0x08002e63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4a:	60fb      	str	r3, [r7, #12]

      break;
 8002e4c:	e00f      	b.n	8002e6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e54:	60fb      	str	r3, [r7, #12]

      break;
 8002e56:	e00a      	b.n	8002e6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5e:	60fb      	str	r3, [r7, #12]

      break;
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	60fb      	str	r3, [r7, #12]

      break;
 8002e6a:	e000      	b.n	8002e6e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002e6c:	bf00      	nop
  }

  return tmpreg;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop

08002e7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8002f94 <TIM_Base_SetConfig+0xd0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <TIM_Base_SetConfig+0x30>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee2:	d007      	beq.n	8002ef4 <TIM_Base_SetConfig+0x30>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8002f98 <TIM_Base_SetConfig+0xd4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_Base_SetConfig+0x30>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a2b      	ldr	r2, [pc, #172]	@ (8002f9c <TIM_Base_SetConfig+0xd8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d108      	bne.n	8002f06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a22      	ldr	r2, [pc, #136]	@ (8002f94 <TIM_Base_SetConfig+0xd0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00b      	beq.n	8002f26 <TIM_Base_SetConfig+0x62>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f14:	d007      	beq.n	8002f26 <TIM_Base_SetConfig+0x62>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1f      	ldr	r2, [pc, #124]	@ (8002f98 <TIM_Base_SetConfig+0xd4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <TIM_Base_SetConfig+0x62>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1e      	ldr	r2, [pc, #120]	@ (8002f9c <TIM_Base_SetConfig+0xd8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d108      	bne.n	8002f38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8002f94 <TIM_Base_SetConfig+0xd0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d103      	bne.n	8002f6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f023 0201 	bic.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	611a      	str	r2, [r3, #16]
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40012c00 	.word	0x40012c00
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800

08002fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f023 0201 	bic.w	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f023 0302 	bic.w	r3, r3, #2
 8002fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8003068 <TIM_OC1_SetConfig+0xc8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d10c      	bne.n	8003016 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f023 0308 	bic.w	r3, r3, #8
 8003002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f023 0304 	bic.w	r3, r3, #4
 8003014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a13      	ldr	r2, [pc, #76]	@ (8003068 <TIM_OC1_SetConfig+0xc8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d111      	bne.n	8003042 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800302c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	621a      	str	r2, [r3, #32]
}
 800305c:	bf00      	nop
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40012c00 	.word	0x40012c00

0800306c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f023 0210 	bic.w	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800309a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f023 0320 	bic.w	r3, r3, #32
 80030b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a1d      	ldr	r2, [pc, #116]	@ (800313c <TIM_OC2_SetConfig+0xd0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d10d      	bne.n	80030e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a14      	ldr	r2, [pc, #80]	@ (800313c <TIM_OC2_SetConfig+0xd0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d113      	bne.n	8003118 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	621a      	str	r2, [r3, #32]
}
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	40012c00 	.word	0x40012c00

08003140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800316e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a1d      	ldr	r2, [pc, #116]	@ (8003210 <TIM_OC3_SetConfig+0xd0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d10d      	bne.n	80031ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a14      	ldr	r2, [pc, #80]	@ (8003210 <TIM_OC3_SetConfig+0xd0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d113      	bne.n	80031ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	621a      	str	r2, [r3, #32]
}
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40012c00 	.word	0x40012c00

08003214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800324a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800325e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	031b      	lsls	r3, r3, #12
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a0f      	ldr	r2, [pc, #60]	@ (80032ac <TIM_OC4_SetConfig+0x98>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d109      	bne.n	8003288 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800327a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	40012c00 	.word	0x40012c00

080032b0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032cc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f023 0307 	bic.w	r3, r3, #7
 80032de:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b70      	cmp	r3, #112	@ 0x70
 80032f8:	d01a      	beq.n	8003330 <TIM_SlaveTimer_SetConfig+0x80>
 80032fa:	2b70      	cmp	r3, #112	@ 0x70
 80032fc:	d860      	bhi.n	80033c0 <TIM_SlaveTimer_SetConfig+0x110>
 80032fe:	2b60      	cmp	r3, #96	@ 0x60
 8003300:	d054      	beq.n	80033ac <TIM_SlaveTimer_SetConfig+0xfc>
 8003302:	2b60      	cmp	r3, #96	@ 0x60
 8003304:	d85c      	bhi.n	80033c0 <TIM_SlaveTimer_SetConfig+0x110>
 8003306:	2b50      	cmp	r3, #80	@ 0x50
 8003308:	d046      	beq.n	8003398 <TIM_SlaveTimer_SetConfig+0xe8>
 800330a:	2b50      	cmp	r3, #80	@ 0x50
 800330c:	d858      	bhi.n	80033c0 <TIM_SlaveTimer_SetConfig+0x110>
 800330e:	2b40      	cmp	r3, #64	@ 0x40
 8003310:	d019      	beq.n	8003346 <TIM_SlaveTimer_SetConfig+0x96>
 8003312:	2b40      	cmp	r3, #64	@ 0x40
 8003314:	d854      	bhi.n	80033c0 <TIM_SlaveTimer_SetConfig+0x110>
 8003316:	2b30      	cmp	r3, #48	@ 0x30
 8003318:	d055      	beq.n	80033c6 <TIM_SlaveTimer_SetConfig+0x116>
 800331a:	2b30      	cmp	r3, #48	@ 0x30
 800331c:	d850      	bhi.n	80033c0 <TIM_SlaveTimer_SetConfig+0x110>
 800331e:	2b20      	cmp	r3, #32
 8003320:	d051      	beq.n	80033c6 <TIM_SlaveTimer_SetConfig+0x116>
 8003322:	2b20      	cmp	r3, #32
 8003324:	d84c      	bhi.n	80033c0 <TIM_SlaveTimer_SetConfig+0x110>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d04d      	beq.n	80033c6 <TIM_SlaveTimer_SetConfig+0x116>
 800332a:	2b10      	cmp	r3, #16
 800332c:	d04b      	beq.n	80033c6 <TIM_SlaveTimer_SetConfig+0x116>
 800332e:	e047      	b.n	80033c0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003340:	f000 f9cc 	bl	80036dc <TIM_ETR_SetConfig>
      break;
 8003344:	e040      	b.n	80033c8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b05      	cmp	r3, #5
 800334c:	d101      	bne.n	8003352 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e03b      	b.n	80033ca <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a1a      	ldr	r2, [r3, #32]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003378:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	4313      	orrs	r3, r2
 8003384:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	621a      	str	r2, [r3, #32]
      break;
 8003396:	e017      	b.n	80033c8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a4:	461a      	mov	r2, r3
 80033a6:	f000 f86f 	bl	8003488 <TIM_TI1_ConfigInputStage>
      break;
 80033aa:	e00d      	b.n	80033c8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033b8:	461a      	mov	r2, r3
 80033ba:	f000 f8cf 	bl	800355c <TIM_TI2_ConfigInputStage>
      break;
 80033be:	e003      	b.n	80033c8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	75fb      	strb	r3, [r7, #23]
      break;
 80033c4:	e000      	b.n	80033c8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80033c6:	bf00      	nop
  }

  return status;
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f023 0201 	bic.w	r2, r3, #1
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4a1f      	ldr	r2, [pc, #124]	@ (800347c <TIM_TI1_SetConfig+0xa8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00b      	beq.n	800341a <TIM_TI1_SetConfig+0x46>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003408:	d007      	beq.n	800341a <TIM_TI1_SetConfig+0x46>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a1c      	ldr	r2, [pc, #112]	@ (8003480 <TIM_TI1_SetConfig+0xac>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d003      	beq.n	800341a <TIM_TI1_SetConfig+0x46>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a1b      	ldr	r2, [pc, #108]	@ (8003484 <TIM_TI1_SetConfig+0xb0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <TIM_TI1_SetConfig+0x4a>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <TIM_TI1_SetConfig+0x4c>
 800341e:	2300      	movs	r3, #0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	e003      	b.n	800343e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	b2db      	uxtb	r3, r3
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f023 030a 	bic.w	r3, r3, #10
 8003458:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f003 030a 	and.w	r3, r3, #10
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800

08003488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f023 0201 	bic.w	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f023 030a 	bic.w	r3, r3, #10
 80034c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f023 0210 	bic.w	r2, r3, #16
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	031b      	lsls	r3, r3, #12
 8003528:	b29b      	uxth	r3, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003536:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f023 0210 	bic.w	r2, r3, #16
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	031b      	lsls	r3, r3, #12
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003598:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	621a      	str	r2, [r3, #32]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b087      	sub	sp, #28
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f023 0303 	bic.w	r3, r3, #3
 80035e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800360a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr

08003630 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800366e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	031b      	lsls	r3, r3, #12
 8003674:	b29b      	uxth	r3, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003682:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	031b      	lsls	r3, r3, #12
 8003688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	621a      	str	r2, [r3, #32]
}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f043 0307 	orr.w	r3, r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	609a      	str	r2, [r3, #8]
}
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr

080036dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	021a      	lsls	r2, r3, #8
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	431a      	orrs	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4313      	orrs	r3, r2
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	609a      	str	r2, [r3, #8]
}
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800371a:	b480      	push	{r7}
 800371c:	b087      	sub	sp, #28
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2201      	movs	r2, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	43db      	mvns	r3, r3
 800373c:	401a      	ands	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a1a      	ldr	r2, [r3, #32]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	fa01 f303 	lsl.w	r3, r1, r3
 8003752:	431a      	orrs	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	621a      	str	r2, [r3, #32]
}
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
	...

08003764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003778:	2302      	movs	r3, #2
 800377a:	e046      	b.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a16      	ldr	r2, [pc, #88]	@ (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c8:	d009      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a12      	ldr	r2, [pc, #72]	@ (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d004      	beq.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a10      	ldr	r2, [pc, #64]	@ (800381c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10c      	bne.n	80037f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800

08003820 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003838:	2302      	movs	r3, #2
 800383a:	e03d      	b.n	80038b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e042      	b.n	800397e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d106      	bne.n	8003912 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7fd fbc5 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2224      	movs	r2, #36	@ 0x24
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003928:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f82c 	bl	8003988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800393e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800394e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800395e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80039c2:	f023 030c 	bic.w	r3, r3, #12
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	430b      	orrs	r3, r1
 80039ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a2c      	ldr	r2, [pc, #176]	@ (8003a9c <UART_SetConfig+0x114>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d103      	bne.n	80039f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039f0:	f7fe fb08 	bl	8002004 <HAL_RCC_GetPCLK2Freq>
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	e002      	b.n	80039fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039f8:	f7fe faf0 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
 80039fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	009a      	lsls	r2, r3, #2
 8003a08:	441a      	add	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	4a22      	ldr	r2, [pc, #136]	@ (8003aa0 <UART_SetConfig+0x118>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	0119      	lsls	r1, r3, #4
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	009a      	lsls	r2, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a34:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa0 <UART_SetConfig+0x118>)
 8003a36:	fba3 0302 	umull	r0, r3, r3, r2
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	2064      	movs	r0, #100	@ 0x64
 8003a3e:	fb00 f303 	mul.w	r3, r0, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	3332      	adds	r3, #50	@ 0x32
 8003a48:	4a15      	ldr	r2, [pc, #84]	@ (8003aa0 <UART_SetConfig+0x118>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a54:	4419      	add	r1, r3
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009a      	lsls	r2, r3, #2
 8003a60:	441a      	add	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa0 <UART_SetConfig+0x118>)
 8003a6e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	2064      	movs	r0, #100	@ 0x64
 8003a76:	fb00 f303 	mul.w	r3, r0, r3
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	3332      	adds	r3, #50	@ 0x32
 8003a80:	4a07      	ldr	r2, [pc, #28]	@ (8003aa0 <UART_SetConfig+0x118>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	f003 020f 	and.w	r2, r3, #15
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	440a      	add	r2, r1
 8003a92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40013800 	.word	0x40013800
 8003aa0:	51eb851f 	.word	0x51eb851f

08003aa4 <memset>:
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4402      	add	r2, r0
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d100      	bne.n	8003aae <memset+0xa>
 8003aac:	4770      	bx	lr
 8003aae:	f803 1b01 	strb.w	r1, [r3], #1
 8003ab2:	e7f9      	b.n	8003aa8 <memset+0x4>

08003ab4 <__libc_init_array>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	2600      	movs	r6, #0
 8003ab8:	4d0c      	ldr	r5, [pc, #48]	@ (8003aec <__libc_init_array+0x38>)
 8003aba:	4c0d      	ldr	r4, [pc, #52]	@ (8003af0 <__libc_init_array+0x3c>)
 8003abc:	1b64      	subs	r4, r4, r5
 8003abe:	10a4      	asrs	r4, r4, #2
 8003ac0:	42a6      	cmp	r6, r4
 8003ac2:	d109      	bne.n	8003ad8 <__libc_init_array+0x24>
 8003ac4:	f000 f81a 	bl	8003afc <_init>
 8003ac8:	2600      	movs	r6, #0
 8003aca:	4d0a      	ldr	r5, [pc, #40]	@ (8003af4 <__libc_init_array+0x40>)
 8003acc:	4c0a      	ldr	r4, [pc, #40]	@ (8003af8 <__libc_init_array+0x44>)
 8003ace:	1b64      	subs	r4, r4, r5
 8003ad0:	10a4      	asrs	r4, r4, #2
 8003ad2:	42a6      	cmp	r6, r4
 8003ad4:	d105      	bne.n	8003ae2 <__libc_init_array+0x2e>
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
 8003ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003adc:	4798      	blx	r3
 8003ade:	3601      	adds	r6, #1
 8003ae0:	e7ee      	b.n	8003ac0 <__libc_init_array+0xc>
 8003ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae6:	4798      	blx	r3
 8003ae8:	3601      	adds	r6, #1
 8003aea:	e7f2      	b.n	8003ad2 <__libc_init_array+0x1e>
 8003aec:	08003b40 	.word	0x08003b40
 8003af0:	08003b40 	.word	0x08003b40
 8003af4:	08003b40 	.word	0x08003b40
 8003af8:	08003b44 	.word	0x08003b44

08003afc <_init>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	bf00      	nop
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr

08003b08 <_fini>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr
